// scss 정리
.list {
    $w: 100px !global; // $로 변수 설정
    $h: 50px !global; // !global 전역 변수 설정, 같은 이름의 변수가 있을 경우 값이 덮어져 사용될 수 있음

    li {
        color: red;

        h3 {

            // 동일한 이름을 가지면 중복하지 않아도 됨
            font: {
                weight: 700;
                size: 17px;
            }
        }

        p {
            color: blue;

            font: {
                size: 12px;
            }
        }

        &:nth-child(2) {
            color: green
        }

        &:last-child {
            color: goldenrod
        }

        // root 를 빠져나감
        @at-root .box {
            width: $w;
            height: $h;
            background: #000;
        }
    }
}


// 변수의 활용
$url: "../img/";
$test: unquote("blue"); // 따옴표 제거
$gol: gold;

.box2 {
    width: $w+200;
    height: $h+200;
    background: url($url+"git.png") no-repeat 0 0 $test;
    background: url("#{$url}git.png") no-repeat 0 0 $test; // #{}, 어디든지 변수 값을 넣을 수 있음
}

// 초기값 설정
$color-primary: gold;

.box {
    $color-primary: blue !default; // 중복 되는 변수가 있을 때 기존 변수값 실행
    background: $color-primary; // red로 실행이 됨
}

// 숫자 연산
.box3 {
    /* 상대적 단위 연산 
    width: 50% - 20px;  단위 모순 에러(Incompatible units error) */
    width: calc(50% - 20px); // 연산 가능 

    /* 나누기 연산 주의할 점 */
    $x: 100px;
    width: $x / 2; // 변수에 저장된 값을 나누기
    height: (100px / 2); // 괄호로 묶어서 나누기
    font-size: 10px + 12px / 3; // 더하기 연산과 같이 사용
    background: gold;
}

// 문자 연산
/* 문자 연산에는 +가 사용됩니다.
문자 연산의 결과는 첫 번째 피연산자를 기준으로 합니다.
첫 번째 피연산자에 따옴표가 붙어있다면 연산 결과를 따옴표로 묶습니다.
반대로 첫 번째 피연산자에 따옴표가 붙어있지 않다면 연산 결과도 따옴표를 처리하지 않습니다. */

div:after {
    content: "Hello "+ World; // content: "Hello World";
    flex-flow: row + "-reverse"+ " "+ wrap // flex-flow: row-reverse wrap;
}

// 논리 연산
/* and, or, not이 있음
if문 사용 가능 */

$width: 90px;

div {
    @if not ($width > 100px) {
        height: 300px;
    }
}


// Mixins 재활용
// 선언하기(@mixin)와 포함하기(@include) 

@mixin large-text {
    font-size: 22px;
    font-weight: bold;
    font-family: sans-serif;
    color: orange;

    span {
        color: green;
    }
}

p.mixin {
    @include large-text;
}

h6.mixin {
    @include large-text;
}

// 함수처럼 매개변수 사용
@mixin dash-line($width: 1px, $color: black) {
    border: $width solid $color;
}

.line1 {
    @include dash-line; // border: 1px solid black
}

.line2 {
    @include dash-line(4px); // border: 4px solid black
}

// 키워드 인수
// 작성하지 않은 인수가 적용될 수 있도록 기본값을 설정해 주는 것이 좋음
@mixin move {
    display: inline-block;
    width: 50px;
    height: 50px;
    background-color: gold;
}

@mixin pos(
    $a : absolute,
    $rel : relative,
    $t : 0,
    $r : 0,
    $b : 0,
    $l : 0
    ) {
    position: $rel;
    border: 1px solid #000;

    .move1 {
        @include move;
        position: $a;
        top: $t;
        right: $r;
    }

    .move2 {
        @include move;
        position: $a;
        top: $t;
        right: $r;
    }
}

.pos {
    @include pos(fixed, $t: 150px, $r: 150px);

    .move2 {
        position: absolute;
    }
}

// 가변인수
// 인수를 순서대로 하나씩 전달 받다가, 3번째 매개변수($bg-values)는 인수의 개수에 상관없이 받음
@mixin bg($width, $height, $bg-values...) {
    width: $width;
    height: $height;
    background: $bg-values;
}

div.bigbox {
    // 위의 Mixin(bg) 설정에 맞게 인수를 순서대로 전달하다가 3번째 이후부터는 개수에 상관없이 전달
    @include bg(
        500px,
        200px,
        url("/img/a.png") no-repeat 0 20px / 10% 10%,
        url("/img/b.png") no-repeat center center / 50%,
        url("/img/c.png") 5% 5% / 10% 10%
    );
    border: 1px solid #000;
}

// 반대로 가변인수를 전달할 값으로 줌
@mixin font(
    $style: normal,
    $weight: normal,
    $size: 16px,
    $family: sans-serif
    ) {
    font: {
        style: $style;
        weight: $weight;
        size: $size;
        family: $family;
    }
}

div {
    // 매개변수 순서와 개수에 맞게 전달
    $font-values: italic, bold, 16px, sans-serif;
    @include font($font-values...);
}

span {
    // 필요한 값만 키워드 인수로 변수에 담아 전달
    $font-values: (style: italic, size: 21px);
    @include font($font-values...);
}

a {
    // 필요한 값만 키워드 인수로 전달
    @include font((weight: 900, family: monospace)...);
}